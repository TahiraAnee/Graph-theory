// using priority queue;
vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        priority_queue <pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
        vector<int>dist(V,1e9);
        //for(int i=0;i<V;i++)dist[i]=1e9;

        dist[S]=0;
        pq.push({0,S});
        while(!pq.empty())
        {
            int dis=pq.top().first;
            int node=pq.top().second;
            pq.pop();
            for(auto it:adj[node])
            {
                int edgeWeight=it[1];
                int adjNode=it[0];
                if(dis+edgeWeight<dist[adjNode])
                {
                    dist[adjNode]=dis+edgeWeight;
                    pq.push({dist[adjNode],adjNode});
                }
            }
        }
        return dist;
        
    }
// using set data structure
   vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        set<pair<int,int>>pq;
        vector<int>dis(V,1e9);
        dis[S]=0;
        pq.insert({0,S});
        
        while(!pq.empty())
        {
            auto it =*(pq.begin());
            int wight=it.first;
            int node=it.second;
             pq.erase(it);
            for(auto u:adj[node])
            {
                int adjNode=u[0];
                int adjW=u[1];
                
                if(adjW+wight<dis[adjNode])
                {
                    if(dis[adjNode]!=1e9)
                    {
                        pq.erase({dis[adjNode],adjNode});
                    }
                    dis[adjNode]=adjW + wight;
                    pq.insert({dis[adjNode],adjNode});
                }
            }
            
        }
        
        return dis;
      
    }
